{"version":3,"sources":["webpack:///./src/views/Test.vue","webpack:///src/views/Test.vue","webpack:///./src/views/Test.vue?b066","webpack:///./src/views/Test.vue?9638","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/shaders/LuminosityHighPassShader.js","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/postprocessing/UnrealBloomPass.js"],"names":["render","_vm","this","_self","_c","_m","staticRenderFns","staticClass","attrs","data","scene","camera","renderer","stats","composer","cube","mounted","methods","init","initScene","initCamera","window","initRenderer","antialias","el","initPlane","side","floorMesh","initCube","color","initOutlinePass","outlinePass","initBloomPass","bloomPass","initOrbitControls","controls","initAxesHelper","requestAnimationFrame","component","LuminosityHighPassShader","shaderID","uniforms","value","vertexShader","fragmentShader","Pass","resolution","strength","radius","threshold","super","undefined","x","y","clearColor","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","highPassShader","highPassUniforms","clone","materialHighPassFilter","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomFactors","bloomTintColors","copyShader","CopyShader","copyUniforms","materialCopy","blending","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","basic","fsQuad","length","dispose","width","height","setSize","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","renderToScreen","material","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius"],"mappings":"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","file":"js/chunk-000a4687.85277e48.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _vm._m(0)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"tempalte\"},[_c('div',{attrs:{\"id\":\"container\"}})])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"tempalte\">\r\n    <div id=\"container\"></div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\r\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      scene: null, // 场景\r\n      camera: null, // 相机\r\n      renderer: null, // 初始渲染\r\n      stats: null, // 性能\r\n      composer: null,\r\n      cube: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    // 初始化\r\n    init() {\r\n      const el = document.getElementById('container');\r\n      this.initScene();\r\n      this.initCamera();\r\n      this.initRenderer(el);\r\n      this.initCube();\r\n      // this.initBloomPass()\r\n      this.initOutlinePass();\r\n      this.initOrbitControls();\r\n      // this.initAxesHelper();\r\n      this.initPlane()\r\n      this.render();\r\n      this.requestAnimationFrame();\r\n    },\r\n    // 场景\r\n    initScene() {\r\n      this.scene = new THREE.Scene();\r\n      this.scene.background = new THREE.Color('#000000');\r\n    },\r\n    // 相机\r\n    initCamera() {\r\n      this.camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        window.innerWidth / window.innerHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      this.camera.position.set(2, 5, 2);\r\n    },\r\n    // 渲染器\r\n    initRenderer(el) {\r\n      this.renderer = new THREE.WebGLRenderer({\r\n        antialias: true\r\n      });\r\n      this.renderer.setPixelRatio(window.devicePixelRatio)\r\n\r\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n      el.appendChild(this.renderer.domElement);\r\n    },\r\n    initPlane() {\r\n      const floorMaterial = new THREE.MeshLambertMaterial({\r\n        side: THREE.DoubleSide\r\n      });\r\n      const floorGeometry = new THREE.PlaneGeometry(12, 12);\r\n      const floorMesh = new THREE.Mesh(floorGeometry, floorMaterial);\r\n      floorMesh.rotation.x -= Math.PI * 0.5;\r\n      floorMesh.position.y -= 1.5;\r\n      this.scene.add(floorMesh);\r\n    },\r\n    // 立方体\r\n    initCube() {\r\n      const geometry = new THREE.BoxGeometry(2, 2, 2);\r\n      const material = new THREE.MeshBasicMaterial({ color: 0x00ffff });\r\n      this.cube = new THREE.Mesh(geometry, material);\r\n      this.scene.add(this.cube);\r\n      this.camera.position.z = 5;\r\n    },\r\n    // 呼吸光\r\n    initOutlinePass() {\r\n      let renderScene = new RenderPass(this.scene, this.camera);\r\n      let outlinePass = new OutlinePass(\r\n        new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n        this.scene,\r\n        this.camera,\r\n        [this.cube]\r\n      );\r\n      // 将此通道结果渲染到屏幕\r\n      outlinePass.renderToScreen = true\r\n      outlinePass.edgeGlow = 1 // 发光强度\r\n      outlinePass.usePatternTexture = false // 是否使用纹理图案\r\n      outlinePass.edgeThickness = 2 // 边缘浓度\r\n      outlinePass.edgeStrength = 5 // 边缘的强度，值越高边框范围越大\r\n      outlinePass.pulsePeriod = 2// 闪烁频率，值越大频率越低\r\n      outlinePass.visibleEdgeColor.set('#ffff00') // 呼吸显示的颜色\r\n      outlinePass.hiddenEdgeColor.set('#ff0000') // 不可见边缘的颜色\r\n      // 将通道加入组合器\r\n      this.composer = new EffectComposer(this.renderer);\r\n      this.composer.addPass(renderScene);\r\n      this.composer.addPass(outlinePass);\r\n    },\r\n    // 炫光\r\n    initBloomPass() {\r\n      let renderScene = new RenderPass(this.scene, this.camera);\r\n      let bloomPass = new UnrealBloomPass(\r\n        new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n        1.5,\r\n        0.4,\r\n        0.85\r\n      );\r\n      bloomPass.renderToScreen = true;\r\n      bloomPass.threshold = 0;\r\n      bloomPass.strength = 1;\r\n      bloomPass.radius = 0;\r\n      this.composer = new EffectComposer(this.renderer);\r\n      this.composer.setSize(window.innerWidth, window.innerHeight);\r\n      this.composer.addPass(renderScene);\r\n      this.composer.addPass(bloomPass);\r\n    },\r\n    // 缩放\r\n    initOrbitControls() {\r\n      let controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n      controls.maxDistance = 10;\r\n      controls.addEventListener('change', this.render);\r\n    },\r\n    // 坐标轴\r\n    initAxesHelper() {\r\n      const axes = new THREE.AxesHelper(2000);\r\n      this.scene.add(axes);\r\n    },\r\n    requestAnimationFrame() {\r\n      this.composer.render();\r\n      requestAnimationFrame(this.requestAnimationFrame);\r\n    },\r\n    // 渲染\r\n    render() {\r\n      this.renderer.render(this.scene, this.camera);\r\n    }\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--13-0!../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!../../node_modules/_vue-loader@15.10.1@vue-loader/lib/index.js??vue-loader-options!./Test.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--13-0!../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!../../node_modules/_vue-loader@15.10.1@vue-loader/lib/index.js??vue-loader-options!./Test.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Test.vue?vue&type=template&id=0ef19dc4&\"\nimport script from \"./Test.vue?vue&type=script&lang=js&\"\nexport * from \"./Test.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.10.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import {\n\tColor\n} from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n\n\tshaderID: 'luminosityHighPass',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tMeshBasicMaterial,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nclass UnrealBloomPass extends Pass {\n\n\tconstructor( resolution, strength, radius, threshold ) {\n\n\t\tsuper();\n\n\t\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\t\tthis.radius = radius;\n\t\tthis.threshold = threshold;\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\t// create color only once here, reuse it later inside the render function\n\t\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t\t// render targets\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizonal = new WebGLRenderTarget( resx, resy );\n\n\t\t\trenderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader,\n\t\t\tdefines: {}\n\t\t} );\n\n\t\t// Gaussian Blur Materials\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// Composite material\n\t\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\t\tthis.compositeMaterial.needsUpdate = true;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// copy material\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.basic = new MeshBasicMaterial();\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t\t//\n\n\t\tfor ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials[ i ].dispose();\n\n\t\t}\n\n\t\tthis.compositeMaterial.dispose();\n\t\tthis.materialCopy.dispose();\n\t\tthis.basic.dispose();\n\n\t\t//\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\tgetSeperableBlurMaterial( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius,\n\t\t\t\t'SIGMA': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetCompositeMaterial( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n"],"sourceRoot":""}