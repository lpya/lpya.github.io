{"version":3,"sources":["webpack:///./node_modules/_three@0.149.0@three/examples/jsm/shaders/CopyShader.js","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/postprocessing/RenderPass.js","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/postprocessing/Pass.js","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/postprocessing/ShaderPass.js","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/postprocessing/MaskPass.js","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/postprocessing/EffectComposer.js","webpack:///./src/views/GlowCube.vue","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/shaders/LuminosityHighPassShader.js","webpack:///./node_modules/_three@0.149.0@three/examples/jsm/postprocessing/UnrealBloomPass.js","webpack:///src/views/GlowCube.vue","webpack:///./src/views/GlowCube.vue?7a53","webpack:///./src/views/GlowCube.vue?d680"],"names":["CopyShader","uniforms","value","vertexShader","fragmentShader","RenderPass","scene","camera","overrideMaterial","clearColor","clearAlpha","super","this","undefined","clear","clearDepth","needsSwap","_oldClearColor","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","getClearAlpha","setClearColor","setRenderTarget","renderToScreen","autoClearColor","autoClearDepth","autoClearStencil","render","Pass","enabled","console","error","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","geometry","dispose","shader","textureID","clone","defines","Object","assign","fsQuad","texture","inverse","context","getContext","state","writeValue","clearValue","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","renderTarget","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","name","renderTarget1","renderTarget2","passes","copyPass","clock","tmp","pass","push","setSize","index","splice","indexOf","passIndex","i","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","isLastEnabledPass","NOTEQUAL","swapBuffers","effectiveWidth","effectiveHeight","pixelRatio","_vm","_self","_c","_m","staticRenderFns","attrs","LuminosityHighPassShader","shaderID","resolution","strength","radius","threshold","x","y","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","highPassShader","highPassUniforms","materialHighPassFilter","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomFactors","bloomTintColors","copyShader","copyUniforms","materialCopy","blending","depthTest","depthWrite","transparent","basic","map","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","data","composer","cube","mounted","methods","init","window","initScene","initCamera","initRenderer","el","initCube","initBloomPass","bloomPass","initOrbitControls","controls","onWindowResize","animation","requestAnimationFrame","component"],"mappings":"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C1B,aAAgB,CAAEA,MAAO,MACzB,gBAAmB,CAAEA,MAAO,MAC5B,YAAe,CAAEA,MAAO,IAGzBC,aACC,gKAMDC,eACC,0qCA6BJ,EAAgByJ,eAAiB,IAAI,OAAS,EAAK,GACnD,EAAgBC,eAAiB,IAAI,OAAS,EAAK,G,4BC5YpC,GACfE,OACA,OACA1J,WACAC,YACAW,cACA+I,cACAC,YAGAC,UACA,aAEAC,SAEAC,OACA,6CACA,iBACA,kBACA,qBACA,gBACA,qBACA,yBACA,iBACAC,uDAGAC,YACA,sBACA,6CAGAC,aACA,uBACA,GACAF,qCACA,GACA,KAEA,iCAGAG,gBACA,yBACA,4DACAC,yCAGAC,WACA,0BACA,cAAA9G,kBACA,0BACA,0BACA,0BAGA+G,gBACA,yCACA,QACA,iDACA,IACA,GACA,KAEAC,oBACAA,cACAA,aACAA,WACA,wCACA,4DACA,yBACA,0BAGAC,oBACA,uDACAC,iBACAA,0CAGA9I,SACA,8CAGA+I,iBACA,wDACA,qCACA,6DAGAC,YACA,uBACAC,yCCxGub,I,YCOnbC,EAAY,eACd,EACAlJ,EACAkF,GACA,EACA,KACA,KACA,MAIa,aAAAgE,E","file":"js/chunk-415aee90.192e6421.js","sourcesContent":["/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor.a *= opacity;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tClock,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _vm._m(0)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',[_c('div',{attrs:{\"id\":\"container\"}})])\n}]\n\nexport { render, staticRenderFns }","import {\n\tColor\n} from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nconst LuminosityHighPassShader = {\n\n\tshaderID: 'luminosityHighPass',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'luminosityThreshold': { value: 1.0 },\n\t\t'smoothWidth': { value: 1.0 },\n\t\t'defaultColor': { value: new Color( 0x000000 ) },\n\t\t'defaultOpacity': { value: 0.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec3 defaultColor;\n\t\tuniform float defaultOpacity;\n\t\tuniform float luminosityThreshold;\n\t\tuniform float smoothWidth;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\n\t\t\tfloat v = dot( texel.xyz, luma );\n\n\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\n\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\n\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\n\t\t}`\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tMeshBasicMaterial,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { LuminosityHighPassShader } from '../shaders/LuminosityHighPassShader.js';\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nclass UnrealBloomPass extends Pass {\n\n\tconstructor( resolution, strength, radius, threshold ) {\n\n\t\tsuper();\n\n\t\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\t\tthis.radius = radius;\n\t\tthis.threshold = threshold;\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\t// create color only once here, reuse it later inside the render function\n\t\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t\t// render targets\n\t\tthis.renderTargetsHorizontal = [];\n\t\tthis.renderTargetsVertical = [];\n\t\tthis.nMips = 5;\n\t\tlet resx = Math.round( this.resolution.x / 2 );\n\t\tlet resy = Math.round( this.resolution.y / 2 );\n\n\t\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy );\n\t\tthis.renderTargetBright.texture.name = 'UnrealBloomPass.bright';\n\t\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tconst renderTargetHorizonal = new WebGLRenderTarget( resx, resy );\n\n\t\t\trenderTargetHorizonal.texture.name = 'UnrealBloomPass.h' + i;\n\t\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\t\tconst renderTargetVertical = new WebGLRenderTarget( resx, resy );\n\n\t\t\trenderTargetVertical.texture.name = 'UnrealBloomPass.v' + i;\n\t\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// luminosity high pass material\n\n\t\tconst highPassShader = LuminosityHighPassShader;\n\t\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = threshold;\n\t\tthis.highPassUniforms[ 'smoothWidth' ].value = 0.01;\n\n\t\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\t\tuniforms: this.highPassUniforms,\n\t\t\tvertexShader: highPassShader.vertexShader,\n\t\t\tfragmentShader: highPassShader.fragmentShader,\n\t\t\tdefines: {}\n\t\t} );\n\n\t\t// Gaussian Blur Materials\n\t\tthis.separableBlurMaterials = [];\n\t\tconst kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\t\tresx = Math.round( this.resolution.x / 2 );\n\t\tresy = Math.round( this.resolution.y / 2 );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t\t// Composite material\n\t\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture1' ].value = this.renderTargetsVertical[ 0 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture2' ].value = this.renderTargetsVertical[ 1 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture3' ].value = this.renderTargetsVertical[ 2 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture4' ].value = this.renderTargetsVertical[ 3 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'blurTexture5' ].value = this.renderTargetsVertical[ 4 ].texture;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = 0.1;\n\t\tthis.compositeMaterial.needsUpdate = true;\n\n\t\tconst bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomFactors' ].value = bloomFactors;\n\t\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\t// copy material\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.basic = new MeshBasicMaterial();\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t\t//\n\n\t\tfor ( let i = 0; i < this.separableBlurMaterials.length; i ++ ) {\n\n\t\t\tthis.separableBlurMaterials[ i ].dispose();\n\n\t\t}\n\n\t\tthis.compositeMaterial.dispose();\n\t\tthis.materialCopy.dispose();\n\t\tthis.basic.dispose();\n\n\t\t//\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tlet resx = Math.round( width / 2 );\n\t\tlet resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'texSize' ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\trenderer.getClearColor( this._oldClearColor );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ 'luminosityThreshold' ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tlet inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( let i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'colorTexture' ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ 'direction' ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ 'bloomStrength' ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ 'bloomRadius' ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ 'bloomTintColors' ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n\tgetSeperableBlurMaterial( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_RADIUS': kernelRadius,\n\t\t\t\t'SIGMA': kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetCompositeMaterial( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'NUM_MIPS': nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'blurTexture1': { value: null },\n\t\t\t\t'blurTexture2': { value: null },\n\t\t\t\t'blurTexture3': { value: null },\n\t\t\t\t'blurTexture4': { value: null },\n\t\t\t\t'blurTexture5': { value: null },\n\t\t\t\t'bloomStrength': { value: 1.0 },\n\t\t\t\t'bloomFactors': { value: null },\n\t\t\t\t'bloomTintColors': { value: null },\n\t\t\t\t'bloomRadius': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n}\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","<template>\r\n  <div>\r\n    <div id=\"container\"></div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      scene: null, // 场景\r\n      camera: null, // 相机\r\n      renderer: null, // 渲染\r\n      composer: null, // 效果合成器\r\n      cube: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    // 初始化\r\n    init() {\r\n      const el = document.getElementById('container');\r\n      this.initScene();\r\n      this.initCamera();\r\n      this.initRenderer(el);\r\n      this.initCube();\r\n      this.initBloomPass()\r\n      this.initOrbitControls();\r\n      this.animation()\r\n      window.addEventListener('resize', this.onWindowResize);\r\n    },\r\n    // 场景\r\n    initScene() {\r\n      this.scene = new THREE.Scene();\r\n      this.scene.background = new THREE.Color('#000000');\r\n    },\r\n    // 相机\r\n    initCamera() {\r\n      this.camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        window.innerWidth / window.innerHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      this.camera.position.set(2, 5, 2);\r\n    },\r\n    // 渲染器\r\n    initRenderer(el) {\r\n      this.renderer = new THREE.WebGLRenderer();\r\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n      el.appendChild(this.renderer.domElement);\r\n    },\r\n    // 立方体\r\n    initCube() {\r\n      const geometry = new THREE.BoxGeometry(2, 2, 2);\r\n      const material = new THREE.MeshBasicMaterial({ color: '#00ffff' });\r\n      this.cube = new THREE.Mesh(geometry, material);\r\n      this.scene.add(this.cube);\r\n      this.camera.position.z = 5;\r\n    },\r\n    // 炫光\r\n    initBloomPass() {\r\n      let renderScene = new RenderPass(this.scene, this.camera);\r\n      let bloomPass = new UnrealBloomPass(\r\n        new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n        1.5,\r\n        0.4,\r\n        0.85\r\n      );\r\n      bloomPass.renderToScreen = true;\r\n      bloomPass.threshold = 0;\r\n      bloomPass.strength = 1;\r\n      bloomPass.radius = 0;\r\n      this.composer = new EffectComposer(this.renderer);\r\n      this.composer.setSize(window.innerWidth, window.innerHeight);\r\n      this.composer.addPass(renderScene);\r\n      this.composer.addPass(bloomPass);\r\n    },\r\n    // 缩放\r\n    initOrbitControls() {\r\n      let controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n      controls.maxDistance = 10;\r\n      controls.addEventListener('change', this.render);\r\n    },\r\n    // 渲染\r\n    render() {\r\n      this.renderer.render(this.scene, this.camera);\r\n    },\r\n    // 自适应\r\n    onWindowResize() {\r\n      this.camera.aspect = window.innerWidth / window.innerHeight;\r\n      this.camera.updateProjectionMatrix();\r\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    },\r\n    // 动画帧\r\n    animation() {\r\n      this.composer.render();\r\n      requestAnimationFrame(this.animation);\r\n    }\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--13-0!../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!../../node_modules/_vue-loader@15.10.1@vue-loader/lib/index.js??vue-loader-options!./GlowCube.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--13-0!../../node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.3.0@babel-loader/lib/index.js!../../node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!../../node_modules/_vue-loader@15.10.1@vue-loader/lib/index.js??vue-loader-options!./GlowCube.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GlowCube.vue?vue&type=template&id=5e0164eb&\"\nimport script from \"./GlowCube.vue?vue&type=script&lang=js&\"\nexport * from \"./GlowCube.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.10.1@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}